page.includeCSS.pagelist = {$pagelist.styles}

# Add breakpoint classes by the width of pagelist cards container
# vanilla (no IE9 support), jQuery or none dependent on constant

["{$pagelist.enablejQueryBreakpoints}" == "vanilla"]
  page.jsFooterInline {
    109823122 = TEXT
    109823122.value (
      function pagelistDetectWidth(a){
      	var container = document.getElementsByClassName(a);
        for (var i = 0; i < container.length; ++i) {
          var item = container[i];
          var width = container[i].clientWidth;
          if (width < {$pagelist.cardsBreakTwo}){
            item.classList.add('break-two');
          } else {
            item.classList.remove('break-two');
          }
          if (width < {$pagelist.cardsBreakOne}) {
            item.classList.add('break-one');
          } else {
            item.classList.remove('break-one');
          }
        }
      }
      pagelistDetectWidth('pagelist cards');
      window.addEventListener("resize", function(){
        pagelistDetectWidth('pagelist cards');
      });
    )
  }
[END]

["{$pagelist.enablejQueryBreakpoints}" == "jQuery"]
  page.jsFooterInline {
    109823122 = TEXT
    109823122.value (
  		jQuery( document ).ready(function() {
  			jQuery('.pagelist.cards').each(function() {
  			  if (jQuery(this).width() < {$pagelist.cardsBreakTwo}){
  			  	jQuery(this).addClass( 'break-two' );
  			  } else{
  					jQuery(this).removeClass('break-two')
  				}
          if (jQuery(this).width() < {$pagelist.cardsBreakOne}){
            jQuery(this).removeClass('break-two')
  			  	jQuery(this).addClass( 'break-one' );
  			  } else{
  					jQuery(this).removeClass('break-one')
  				}
  			});
  		});
  		jQuery(window).resize(function(){
  		  jQuery('.pagelist.cards').each(function() {
          if (jQuery(this).width() < {$pagelist.cardsBreakTwo}){
  			  	jQuery(this).addClass( 'break-two' );
  			  } else{
  					jQuery(this).removeClass('break-two')
  				}
          if (jQuery(this).width() < {$pagelist.cardsBreakOne}){
            jQuery(this).removeClass('break-two')
  			  	jQuery(this).addClass( 'break-one' );
  			  } else{
  					jQuery(this).removeClass('break-one')
  				}
  			});
  		});
  	)
  }
[END]

tt_content.defaultpagelist =< lib.contentElement
tt_content.defaultpagelist.templateRootPaths.10 = EXT:pagelist/Resources/Private/Templates/
tt_content.defaultpagelist.templateRootPaths.20 = {$pagelist.templateRootPaths}
tt_content.defaultpagelist.partialRootPaths.10 = EXT:pagelist/Resources/Private/Partials/
tt_content.defaultpagelist.partialRootPaths.20 = {$pagelist.partialRootPaths}
tt_content.defaultpagelist {
    settings {
        cardImageWidth = {$pagelist.cardImageWidth}
        cardImageHeight = {$pagelist.cardImageHeight}
        listImageWidth = {$pagelist.listImageWidth}
        listImageHeight = {$pagelist.listImageHeight}
    }
    variables {
        pagelistPaginationItems = COA
        pagelistPaginationItems {
            5 = TEXT
            5.value = {$pagelist.paginationItems}
            5.stdWrap.if.isFalse.field = tx_pagelist_paginateitems
            10 = TEXT
            10.value.field = tx_pagelist_paginateitems
            10.stdWrap.if.isTrue.field = tx_pagelist_paginateitems
        }
        pagelistPaginationLinks = TEXT
        pagelistPaginationLinks.value = {$pagelist.paginationLinks}
    }
    extbase {
        pluginName = Pagelist
        controllerName = Pagelist
        controllerExtensionName = pagelist
        controllerActionName = show
    }
    stdWrap {
        editIcons = tt_content: header [header_layout], pages
        editIcons.iconTitle.data = LLL:EXT:fluid_styled_content/Resources/Private/Language/FrontendEditing.xlf:editIcon.menu
    }
}

# check if personnel extension is loaded and adds authors
["{$pagelist.personnelIsLoaded}" == "1"]
    tt_content.defaultpagelist.dataProcessing.10.dataProcessing {
        30 = TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor
        30 {
            table = tx_personnel_domain_model_person
            uidInList.field = tx_personnel_authors
            pidInList = 0
            as = authors
            dataProcessing {
                10 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
                10.references.table = tx_personnel_domain_model_person
                10.references.fieldName = images
                10.as = authorimages
            }
        }
    }
[END]

tt_content.pagelist_sub =< tt_content.defaultpagelist
tt_content.pagelist_sub {
    templateName = Pagelist
    dataProcessing.10 = TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor
    dataProcessing.10 {
        table = pages
        pidInList.field = pages
        max.field = tx_pagelist_limit
        begin.field = tx_pagelist_startfrom
        groupBy = uid
        languageField = 0
        join.data = field:selected_categories
        join.wrap = sys_category_record_mm ON uid = sys_category_record_mm.uid_foreign AND sys_category_record_mm.uid_local IN(|)
        join.wrap.if.isTrue.field = selected_categories
        where.stdWrap.orderedStdWrap {
            10.wrap = AND tx_pagelist_notinlist = '0' AND sys_language_uid='###language###'
            20.wrap = AND tablenames='pages' and fieldname='category'
            20.wrap.if.isTrue.field = selected_categories
            30.wrap = AND (tx_personnel_authors LIKE '%,###authors###' OR tx_personnel_authors LIKE '###authors###,%' OR tx_personnel_authors='###authors###')
            30.wrap.if.isTrue.field = tx_pagelist_authors
            40.wrap = AND l18n_cfg != '1' AND l18n_cfg != '3'
            40.wrap.if.isFalse.data = sitelanguage:languageId
        }
        markers.authors.data = field:tx_pagelist_authors
        orderBy.field = tx_pagelist_orderby
        as = pagelist
        dataProcessing {
            10 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
            10.references.fieldName = media
            20 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
            20.references.fieldName = tx_pagelist_images
            20.as = listimages
        }
    }
}

tt_content.pagelist_selected =< tt_content.defaultpagelist
tt_content.pagelist_selected {
    templateName = Pagelist
    dataProcessing {
        10 = TYPO3\CMS\Frontend\DataProcessing\MenuProcessor
        10 {
            special = list
            special.value.field = pages
            # alternativeSortingField.field = tx_pagelist_orderby
            # maxItems.field = tx_pagelist_limit
            # begin.field = tx_pagelist_startfrom
            as = pagelist
            dataProcessing {
                10 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
                10.references.fieldName = media
                20 = TYPO3\CMS\Frontend\DataProcessing\FilesProcessor
                20.references.fieldName = tx_pagelist_images
                20.as = listimages
                30 = TYPO3\CMS\Frontend\DataProcessing\DatabaseQueryProcessor
            }
        }
    }
}
